--1--Cristian Camilo lopez perea 230162001
--2--Juan David Oviedo Rodriguez 230171013

--1) Para el esquema del anexo cree en un usuario llamado "airbnb". Si existe se debe de eliminar, luego hacer la creación y privilegios, y consignarlos en un script .sql particular para tal propósito.

ALTER SESSION SET "_ORACLE_SCRIPT"=TRUE;
DECLARE
    USEREXIST INTEGER;
BEGIN
    SELECT COUNT(*) INTO USEREXIST FROM ALL_USERS U WHERE U.USERNAME = 'AIRBNB';
    IF(USEREXIST = 1) THEN
        EXECUTE IMMEDIATE 'DROP USER AIRBNB CASCADE';
        EXECUTE IMMEDIATE 'CREATE USER AIRBNB IDENTIFIED BY AIRBNB';
        EXECUTE IMMEDIATE 'GRANT ALL PRIVILEGES TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT CREATE VIEW TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT CREATE SYNONYM TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT CREATE TABLE TO AIRBNB';
    END IF;
    IF(USEREXIST = 0) THEN
        EXECUTE IMMEDIATE 'CREATE USER AIRBNB IDENTIFIED BY AIRBNB';
        EXECUTE IMMEDIATE 'GRANT ALL PRIVILEGES TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT UNLIMITED TABLESPACE TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT CREATE VIEW TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT CREATE SYNONYM TO AIRBNB';
        EXECUTE IMMEDIATE 'GRANT CREATE TABLE TO AIRBNB';
    END IF;
END;

--2 Crear la base de datos correspondiente al schema relacional del anexo.
--a. Por cada tabla un comando create table
--b. Por cada restricción un comando alter table
--c. Primero todos los comandos create
--d. Seguido todos los alter
--e. Generar un archivo .sql

--TABLE USER 
CREATE TABLE USER1
(
    U_ID            VARCHAR2(15),
    U_UPDATED_AT    DATE NOT NULL,
    U_CREATED_AT    DATE NOT NULL,
    U_EMAIL         VARCHAR2(100),
    U_PASSWORD      VARCHAR2(15),
    U_FIRST_NAME    VARCHAR2(15),
    U_LAST_NAME     VARCHAR2(15)
);


--TABLE STATE
CREATE TABLE STATE
(
    S_ID            VARCHAR2(15),
    S_UPDATED_AT    DATE NOT NULL,
    S_CREATED_AT    DATE NOT NULL,
    S_NAME_          VARCHAR2(15)
);


--TABLE CITY
CREATE TABLE CITY
(
    C_ID            VARCHAR2(15),
    C_UPDATED_AT    DATE NOT NULL,
    C_CREATED_AT    DATE NOT NULL,
    S_STATE_ID      VARCHAR2(15),
    C_NAME          VARCHAR2(15)
);


--TABLE AMENITY
CREATE TABLE AMENITY
(
    A_ID            VARCHAR2(15),
    A_UPDATED_AT    DATE NOT NULL,
    A_CREATED_AT    DATE NOT NULL,
    A_NAME          VARCHAR2(15)
);


--TABLE PLACEAMENITY
CREATE TABLE PLACEAMENITY
(
    P_PLACE_ID      VARCHAR2(15),
    P_AMENITY_ID    VARCHAR2(15)
);


--TABLE PLACE
CREATE TABLE PLACE
(
    P_ID                VARCHAR2(15),
    P_UPDATED_AT        DATE NOT NULL,
    P_CREATED_AT        DATE NOT NULL,
    P_U_ID              VARCHAR2(15),
    P_NAME              VARCHAR2(15),
    P_C_ID              VARCHAR2(15),
    P_DESCRIPTION       VARCHAR2(15),
    P_NUMBER_ROOMS      NUMBER(4,0) DEFAULT 0,
    P_NUMBER_BATHROOMS  NUMBER(4,0) DEFAULT 0,
    P_MAX_GUEST         NUMBER(4,0) DEFAULT 0,
    P_PRICE_BY_NIGHT    NUMBER(4,0) DEFAULT 0,
    P_LATITUDE          NUMBER(8,2),
    P_LONGITUDE         NUMBER(8,2)
);


--TABLE REVIEW
CREATE TABLE REVIEW
(
    R_ID            VARCHAR2(15),
    R_UPDATED_AT    DATE NOT NULL,
    R_CREATED_AT    DATE NOT NULL,
    R_U_USER_ID     VARCHAR2(15),
    R_P_PLACE_ID    VARCHAR2(15),
    R_TEXT          VARCHAR2(15)
);

-- CONSTRAINT PRIMARY KEY
ALTER TABLE REVIEW          ADD CONSTRAINT R_ID_PK  PRIMARY KEY (R_ID);
ALTER TABLE PLACE           ADD CONSTRAINT P_ID_PK PRIMARY KEY (P_ID);
ALTER TABLE AMENITY         ADD CONSTRAINT A_ID_PK  PRIMARY KEY (A_ID);
ALTER TABLE CITY            ADD CONSTRAINT C_ID_PK  PRIMARY KEY (C_ID);
ALTER TABLE STATE           ADD CONSTRAINT S_ID_PK  PRIMARY KEY (S_ID);
ALTER TABLE USER1           ADD CONSTRAINT U_ID_PK  PRIMARY KEY (U_ID);

-- CONSTRAINT FOREIGN KEY
ALTER TABLE REVIEW          ADD CONSTRAINT R_U_USER_ID_FK   FOREIGN KEY (R_U_USER_ID)  REFERENCES USER1(U_ID);
ALTER TABLE REVIEW          ADD CONSTRAINT R_P_PLACE_ID_FK  FOREIGN KEY (R_P_PLACE_ID) REFERENCES PLACE(P_ID);
ALTER TABLE PLACE           ADD CONSTRAINT P_C_ID_FK        FOREIGN KEY (P_C_ID)       REFERENCES CITY(C_ID);
ALTER TABLE PLACE           ADD CONSTRAINT P_U_ID_FK        FOREIGN KEY (P_U_ID)       REFERENCES USER1(U_ID);
ALTER TABLE CITY            ADD CONSTRAINT S_STATE_ID_FK          FOREIGN KEY (S_STATE_ID)   REFERENCES STATE(S_ID);
ALTER TABLE PLACEAMENITY    ADD CONSTRAINT P_AMENITY_ID_FK  FOREIGN KEY (P_AMENITY_ID)   REFERENCES AMENITY(A_ID);
ALTER TABLE PLACEAMENITY    ADD CONSTRAINT P_PLACE_ID_FK  FOREIGN KEY (P_PLACE_ID)   REFERENCES PLACE(P_ID);


--3) Crear scripts .sql para cargar unos pocos datos por cada tabla a la base de datos. Un script por
tabla.
INSERT ALL
    INTO USER1        (U_ID, U_UPDATED_AT, U_CREATED_AT, U_EMAIL, U_PASSWORD, U_FIRST_NAME, U_LAST_NAME ) VALUES ('1', TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'), 'MESSI@HOTMAIL.COM', '001', 'LEO', 'MESSI')
INTO USER1        (U_ID, U_UPDATED_AT, U_CREATED_AT, U_EMAIL, U_PASSWORD, U_FIRST_NAME, U_LAST_NAME ) VALUES ('2', TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'), 'JAMES@HOTMAIL.COM', '002', 'JAMES', 'RODRIGUEZ')
INTO USER1        (U_ID, U_UPDATED_AT, U_CREATED_AT, U_EMAIL, U_PASSWORD, U_FIRST_NAME, U_LAST_NAME ) VALUES ('3', TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'), 'ADRIAN@HOTMAIL.COM', '003', 'ADRIAN', 'RAMOS')
INTO STATE        (S_ID, S_UPDATED_AT, S_CREATED_AT, S_NAME_)                                          VALUES ('1',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'BUGALAGRANDE')
INTO STATE        (S_ID, S_UPDATED_AT, S_CREATED_AT, S_NAME_)                                          VALUES ('2',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'ANDALUCIA')
INTO STATE        (S_ID, S_UPDATED_AT, S_CREATED_AT, S_NAME_)                                          VALUES ('3',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'LA PAILA')
INTO CITY         (C_ID, C_UPDATED_AT, C_CREATED_AT, S_STATE_ID, C_NAME)                               VALUES('1',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'1','ZARZAL')
INTO CITY         (C_ID, C_UPDATED_AT, C_CREATED_AT, S_STATE_ID, C_NAME)                               VALUES('2',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'2','ARMENIA')
INTO CITY         (C_ID, C_UPDATED_AT, C_CREATED_AT, S_STATE_ID, C_NAME)                               VALUES('3',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'3','MADALLO')
INTO AMENITY      (A_ID, A_UPDATED_AT, A_CREATED_AT, A_NAME)                                           VALUES('1',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'UNO')
INTO AMENITY      (A_ID, A_UPDATED_AT, A_CREATED_AT, A_NAME)                                           VALUES('2',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'DOS')
INTO AMENITY      (A_ID, A_UPDATED_AT, A_CREATED_AT, A_NAME)                                           VALUES('3',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'TRES')
INTO PLACE        (P_ID, P_UPDATED_AT, P_CREATED_AT, P_U_ID, P_C_ID, P_DESCRIPTION, P_NUMBER_ROOMS, P_NUMBER_BATHROOMS, P_MAX_GUEST, P_PRICE_BY_NIGHT, P_LATITUDE, P_LONGITUDE, P_NAME) VALUES('1',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'1','1','HI',1,1,1,1,3.42, -76.52,'COLISEO')
INTO PLACE        (P_ID, P_UPDATED_AT, P_CREATED_AT, P_U_ID, P_C_ID, P_DESCRIPTION, P_NUMBER_ROOMS, P_NUMBER_BATHROOMS, P_MAX_GUEST, P_PRICE_BY_NIGHT, P_LATITUDE, P_LONGITUDE, P_NAME) VALUES('2',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'2','2','HI',1,1,1,1,3.42, -76.52,'DISCOTECA')
INTO PLACE        (P_ID, P_UPDATED_AT, P_CREATED_AT, P_U_ID, P_C_ID, P_DESCRIPTION, P_NUMBER_ROOMS, P_NUMBER_BATHROOMS, P_MAX_GUEST, P_PRICE_BY_NIGHT, P_LATITUDE, P_LONGITUDE, P_NAME) VALUES('3',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'3','3','HI',1,1,1,1,3.42, -76.52,'CONCIERTO')
INTO PLACEAMENITY (P_PLACE_ID, P_AMENITY_ID)                                                           VALUES('1','1')
INTO PLACEAMENITY (P_PLACE_ID, P_AMENITY_ID)                                                           VALUES('2','2')
INTO PLACEAMENITY (P_PLACE_ID, P_AMENITY_ID)                                                           VALUES('3','3')
INTO REVIEW       (R_ID, R_UPDATED_AT, R_CREATED_AT, R_U_USER_ID, R_P_PLACE_ID, R_TEXT)                VALUES('1',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'1','1','REVIEW 2')
INTO REVIEW       (R_ID, R_UPDATED_AT, R_CREATED_AT, R_U_USER_ID, R_P_PLACE_ID, R_TEXT)                VALUES('2',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'2','2','REVIEW 2')
INTO REVIEW       (R_ID, R_UPDATED_AT, R_CREATED_AT, R_U_USER_ID, R_P_PLACE_ID, R_TEXT)                VALUES('3',TO_DATE(SYSDATE,'DD/MM/YYYY'), TO_DATE(SYSDATE,'DD/MM/YYYY'),'3','3','REVIEW 3')
SELECT * FROM DUAL;


--4) Crear vistas para poder consultar:
--A. Las Review que realiza un usuario sobre un Place
--B. Los Place que hay en una City y un State
--C. Averiguar los Place x Amenity o Ameniy x Place

--A
CREATE OR REPLACE VIEW V_REVIEW_USER_PLACE AS
SELECT
    REVIEW.*, USER1.U_FIRST_NAME AS NOMBRE_USUARIO, PLACE.P_NAME AS NOMBRE_LUGAR
FROM
    REVIEW INNER JOIN USER1 ON REVIEW.R_U_USER_ID = USER1.U_ID INNER JOIN PLACE ON REVIEW.R_P_PLACE_ID=PLACE.P_ID;

--B
CREATE VIEW V_PLACE_CITY_STATE AS
SELECT
    PLACE.P_NAME,STATE.S_NAME_,CITY.C_NAME
FROM
    PLACE INNER JOIN CITY ON PLACE.P_C_ID = CITY.C_ID INNER JOIN STATE ON CITY.S_STATE_ID=STATE.S_ID;

--C
CREATE VIEW V_PLACE_AMENITY_OTRA AS
SELECT
    PLACE.P_NAME, AMENITY.A_NAME
FROM
    PLACE INNER JOIN PLACEAMENITY ON PLACE.P_ID = PLACEAMENITY.P_PLACE_ID INNER JOIN AMENITY ON PLACEAMENITY.P_AMENITY_ID = AMENITY.A_ID;


--5) Crear un usuario adicional (Dejar el script .sql de creación y privilegios)
--A. Crear provilegios de acceso a sus datos (Dejar privilegios en archivo .sql)
--B. Crear sinónimos para hacer transparente el acceso a las tablas y vistas (Script .sql).
--C. Los comandos de este punto en un solo archivo .sql

--CREAR USUARIO
CREATE USER ADICIONAL IDENTIFIED BY ADICIONAL;

--PRIV ACCESO A DATOS
GRANT SELECT, DELETE, INSERT, UPDATE ON AIRBNB.CITY TO ADICIONAL;
GRANT SELECT, DELETE, INSERT, UPDATE ON AIRBNB.STATE TO ADICIONAL;
GRANT SELECT, DELETE, INSERT, UPDATE ON AIRBNB.USER1 TO ADICIONAL;
GRANT SELECT, DELETE, INSERT, UPDATE ON AIRBNB.PLACEAMENITY TO ADICIONAL;
GRANT SELECT, DELETE, INSERT, UPDATE ON AIRBNB.REVIEW TO ADICIONAL;
GRANT SELECT, DELETE, INSERT, UPDATE ON AIRBNB.AMENITY TO ADICIONAL;
GRANT SELECT, DELETE, INSERT, UPDATE ON AIRBNB.PLACE TO ADICIONAL;

--CREAR SYNONYM
CREATE SYNONYM CITYSYN FOR AIRBNB.CITY;
CREATE SYNONYM STATESYN FOR AIRBNB.STATE;
CREATE SYNONYM USER1SYN FOR AIRBNB.USER1;
CREATE SYNONYM PLACEAMENITYSYN FOR AIRBNB.PLACEAMENITY;
CREATE SYNONYM REVIEWSYN FOR AIRBNB.REVIEW;
CREATE SYNONYM AMENITYSYN FOR AIRBNB.AMENITY;
CREATE SYNONYM PLACESYN FOR AIRBNB.PLACE;
CREATE SYNONYM V_REVIEW_USER_PLACESYN FOR AIRBNB.V_REVIEW_USER_PLACE;
CREATE SYNONYM V_PLACE_CITY_STATESYN FOR AIRBNB.V_PLACE_CITY_STATE;
CREATE SYNONYM V_PLACE_AMENITY_OTRASYM FOR AIRBNB.V_PLACE_AMENITY_OTRA;

--6) Se necesita una consulta de jerarquía (Arbol).
--A. Si es necesario extienda el modelo de datos para atender el requerimiento
--B. Entregue la consulta en script SQL
DROP TABLE SITIOS;
CREATE TABLE SITIOS
(
    ID_SITIO            VARCHAR2(20),
    NAME_SITIO          VARCHAR2(20),
    ID_SITIO_HIJO       VARCHAR2(20)
);

ALTER TABLE SITIOS ADD CONSTRAINT ID_SITIO_PK  PRIMARY KEY (ID_SITIO);
ALTER TABLE SITIOS ADD CONSTRAINT ID_SITIO_HIJO_FK   FOREIGN KEY (ID_SITIO_HIJO)  REFERENCES SITIOS(ID_SITIO);

INSERT ALL
    INTO SITIOS (ID_SITIO, NAME_SITIO) VALUES('1','COLOMBIA')
INTO SITIOS (ID_SITIO, NAME_SITIO, ID_SITIO_HIJO) VALUES('2','VALLE','1')
INTO SITIOS (ID_SITIO, NAME_SITIO, ID_SITIO_HIJO) VALUES('3','BUGALAGRANDE','2')
INTO SITIOS (ID_SITIO, NAME_SITIO, ID_SITIO_HIJO) VALUES('4','ANDALUCIA','2')
INTO SITIOS (ID_SITIO, NAME_SITIO, ID_SITIO_HIJO) VALUES('5','ZARZAL','1')
INTO SITIOS (ID_SITIO, NAME_SITIO, ID_SITIO_HIJO) VALUES('6','LA PAILA','5')
SELECT * FROM DUAL;

SELECT NAME_SITIO, LEVEL,
       SYS_CONNECT_BY_PATH(NAME_SITIO, '/') "PATH"
FROM SITIOS
START WITH NAME_SITIO='COLOMBIA'
CONNECT BY PRIOR ID_SITIO = ID_SITIO_HIJO
ORDER BY LEVEL;


--7) Presente una consulta que permita evaluar un join entre tablas y que en las tuplas a presentar haya datos de ambas tablas que participan en el join agregando funciones de agrupación y de filtrado de los datos agrupados. Regístrelo en archivo .sql.

SELECT
    STATE.S_ID AS STATE_ID, CITY.C_ID AS CITY_ID
FROM CITY  INNER JOIN STATE
                      ON CITY.S_STATE_ID= STATE.S_ID
WHERE CITY.C_ID>1
GROUP BY STATE.S_ID,CITY.C_ID
ORDER BY STATE.S_ID;


--8) Presente una consulta que tenga filtrado de datos usando operaciones IN o ANY o ALL con subquery. Registre la consulta en script SQL
SELECT
    *
FROM CITY C
WHERE C.C_ID IN (SELECT
                     P.P_ID
                 FROM PLACE P
                 WHERE P.P_ID>1);


--9) Realice una consulta que presente los datos de forma matricial en donde las columnas presenten información de tiempo (años, meses o días), y en las filas usuarios. Entregue la consulta en script SQL
SELECT
    *
FROM (SELECT
          DISTINCT U.U_ID ||' '||U.U_FIRST_NAME PERSONA, EXTRACT(MONTH FROM U.U_CREATED_AT) AS MES, EXTRACT(DAY FROM U.U_CREATED_AT) AS DIA
      FROM USER1 U, REVIEW R
      WHERE U.U_ID = r.r_u_user_id)
    PIVOT (SUM(DIA) FOR MES IN ('01','02','03','04','05','06','07','08','09','10','11','12'))
ORDER BY PERSONA;
